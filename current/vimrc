" Configuration file for vim
set modelines=0		" CVE-2007-2438

" Normally we use vim-extensions. If you want true vi-compatibility
" remove change the following statements
set nocompatible	" Use Vim defaults instead of 100% vi compatibility
set backspace=2		" more powerful backspacing

" Don't write backup file if vim is being called by "crontab -e"
au BufWrite /private/tmp/crontab.* set nowritebackup nobackup
" Don't write backup file if vim is being called by "chpass"
au BufWrite /private/etc/pw.* set nowritebackup nobackup

let skip_defaults_vim=1

"************
" Preferences
"************ 
" Colors
set t_Co=256
colorscheme wombat256mod
set background=dark
" Indenting
set smartindent
set autoindent
" Encoding
set tenc=utf-8
set enc=utf-8
" Search
set incsearch
set nohlsearch
" Widths
"set textwidth=79
set textwidth=76
set shiftwidth=4
" Tab behavior.
set expandtab
set smarttab
set tabstop=4
" Text wrapping
set nowrap
" Bells
set noerrorbells
set novisualbell 
" Backup
set backup
set writebackup
set backupdir=/tmp,.
" Show file stats 
set ruler
" Show line numbers 
set number
" Allow hidden buffers
set hidden
"
set showmatch
set showmode
set showcmd
set laststatus=2
set shiftround
set magic
set report=0
set history=4000
set shell=/bin/zsh
set autowrite
set mouse=a
set lazyredraw
set nocp

set grepprg=grep\ -nH\ $*

" Wilds
set wildchar=<TAB>
set wildmenu
set wildmode=list:longest
set wildignore=*.0,*.obj,*.bak,*.exe,*.pyc,*.swp
set wildignore+=*/CVS/
set wmh=0
set ww=h,l,b,<,>,[,]
"
set listchars=tab:\|\ ,extends:>,precedes:< "These only show when 'list' is set
set pastetoggle=<Insert>
set ignorecase
set complete -=k complete+=k
set completeopt=menuone,longest ",preview
set viminfo-=! viminfo+=!
set spell

"****************
" Folding
"****************
set foldenable
set foldmarker={,}
set foldmethod=marker
set foldtext=substitute(getline(v:foldstart),'{.*','{...}','')
set foldcolumn=0
set foldlevelstart=100

let IspellLang = 'english'

"*******************
" Custom Keybindings
"*******************
nmap ,s :source ~/.vimrc<CR> 
nmap ,v :edit ~/.vimrc<CR>
nmap ,t :NERDTreeToggle<CR>

map :E :e
map :Q :q
map :WQ :wq
map :Wq :wq
map :qwa :wqa
map <Leader>t :Tlist<CR>
nnoremap <Leader><Leader> :set invpaste paste?<CR>
map <C-Z> :shell<CR>
map :W :w
"Search and replace highlighted word
nmap <Leader>f :%s/\<<c-r>=expand("<cword>")<cr>\>/
nmap <C-n> :bn<cr>
nmap <C-p> :bp<cr>
nmap ,m :make<cr>
nmap ,j :make jar<cr>
nmap ,q :cw<cr>
nmap ,n :cn<cr>
nmap ,p :cp<cr>
nmap ,o :!open %<.pdf<cr><cr>
nmap ,r :!./%<<cr>

"Underline the current line with dashes
map <Leader>u Yp:s/./-/g<CR>:let @/=""<CR>
map <Leader>U Yp:s/./=/g<CR>:let @/=""<CR>

"Search in a visual block only
vnoremap / <Esc>/\%><C-R>=line("'<")-1<CR>l\%<<C-R>=line("'>")+1<CR>l
vnoremap ? <Esc>?\%><C-R>=line("'<")-1<CR>l\%<<C-R>=line("'>")+1<CR>l

map <silent> <Leader>hc :let @/ = '\%' . virtcol('.') .  'v' <bar> set hls<CR>

"*********
" Plug-ins
"*********

"Stuff for miniBufExplorer.
let g:miniBufExplMaxHeight=5
let g:miniBufExplorerMoreThanOne=2

"let g:completekey = "<C-H>"

"Stuff for tag list
let Tlist_Ctags_Cmd = '/usr/bin/ctags'
let Tlist_Use_Right_Window = 0
let Tlist_WinWidth = 30
let Tlist_Compact_Format = 1
let Tlist_Exit_OnlyWindow = 1
nnoremap <silent> <Leader>TO :Tlist<CR>
nnoremap <silent> <Leader>TC :TlistClose<CR>

"**********
" Functions
"**********
function! MyLastWindow()
    " if the window is quickfix go on
    if &buftype=="quickfix"
        " if this window is last on screen, quit without warning
        if winbufnr(2) == -1
            quit!
        endif
    endif
endfunction 

" Adds the #define to protect h files when h files are created.
function! s:insert_gates()
    let gatename = substitute(toupper(expand("%:t")), "\\.", "_", "g")
    execute "normal i#ifndef " . gatename
    execute "normal o#define " . gatename . "   "
    execute "normal Go#endif /* " . gatename . " */"
    normal kk
endfunction

"-----------------------------------------
"--Auto Command 
"-----------------------------------------
filetype plugin on
filetype indent on

if has("autocmd")
    autocmd FileType python set omnifunc=pythoncomplete#Complete
    "autocmd FileType php set omnifunc=phpcomplete#Complete
    autocmd FileType javascript set omnifunc=javascriptcomplete#CompleteJS
    autocmd FileType css set omnifunc=csscomplete#CompleteCSS
    autocmd FileType xml set omnifunc=xmlcomplete#CompleteTags
    autocmd FileType rb set omnifunc=rubycomplete#Complete
    autocmd FileType c set omnifunc=ccomplete#Complete
    "autocmd FileType cpp.c set omnifunc=cppcomplete#Complete
    autocmd FileType sql set omnifunc=sqlcomplete#Complete
    autocmd FileType html set omnifunc=htmlcomplete#CompleteTags
    autocmd FileType java set omnifunc=javacomplete#Complete

    autocmd BufEnter *.{tex,txt} set dictionary-=/usr/share/dict/words dictionary+=/usr/share/dict/words
    autocmd FileType *.{tex,txt} set noci noai nosi spell
    autocmd BufEnter *.py map <f2> :w\|!python %<cr>
    autocmd BufEnter *.{scm,lisp} set lisp
    autocmd BufNewFile mutt-* set tw=76
    autocmd BufNewFile *.{h,hpp} call <SID>insert_gates() 
    autocmd BufEnter * call MyLastWindow()

    autocmd BufRead *.py set smartindent cinwords=if,elif,else,for,while,try,except,finally,def,class

    autocmd CursorMovedI * if pumvisible() == 0|pclose|endif
    autocmd InsertLeave * if pumvisible() == 0|pclose|endif

endif

"*******
" Python 
"*******

if has('python')

python << EOF
import os
import sys
import vim
for p in sys.path:
    if os.path.isdir(p):
        vim.command(r"set path+=%s" % (p.replace(" ", r"\ ")))
EOF

endif

"*******
" Macvim
"*******

" Makes macvim perform more like textedit with shift highlighting.
if has("gui_macvim")
    let macvim_hig_shift_movement=1 
endif

" Makes macvim ignore a coloscheme listed in .gvimrc
"let macvim_skip_colorscheme=1

" EOF
syntax on
