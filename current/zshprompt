#
#
# ZSH Prompt

###       ###
### TO DO ###
###       ###

# 1) - Truncation of Gradients and Gradient Fill Bars for smaller term widths.
# 2) - Add vcs_info into second line of prompt.
# 3) - Add battery info into second line of prompt.
# 4) - Add File & Directory count, as well as file size of CWD to RPROMPT
# 5) - Convert glyph characters to unicode equivalents.
#          I could do this by checking for glyph character support, 
#          printing the characters with print -P or echo -e and populate 
#          ARRAY_GRADIENT_RIGHT_CHARACTERS from the printed characters. 
# 6) - Add timer for externally-loaded prompt modules so prompt will time
#          out and continue to load, rather than waiting for a stuck module.  
# 7) - 

###                             ###
### CONSTANTS & ARRAY CONSTANTS ###
###                             ###

#fn_GradientColors () {
    # Define Gradient colors array.
    ARRAY_GRADIENT_LEFT_FOREGROUND_COLORS=(227 221 215 209 203 197 161 125 89 53 233)
    ARRAY_GRADIENT_LEFT_BACKGROUND_COLORS=(226 220 214 208 202 196 160 124 88 52 16)
    #ARRAY_GRADIENT_LEFT_CHARACTERS=(░ ░ ░ ░ ▒ ▒ ▒ ▒ ▓ ▓ ▓)
    ARRAY_GRADIENT_LEFT_CHARACTERS=(░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░)
    # Use below if no support for extended characters.
    #ARRAY_GRADIENT_LEFT_CHARACTERS=(" " " " " " " " " " " " " " " " " " " " " ")
    #ARRAY_GRADIENT_LEFT_CHARACTERS=(\xE2\x96\x91 \xE2\x96\x91 \xE2\x96\x91 \xE2\x96\x91 \xE2\x96\x91 \xE2\x96\x91 \xE2\x96\x91 \xE2\x96\x91 \xE2\x96\x91 \xE2\x96\x91 \xE2\x96\x91)
    ARRAY_GRADIENT_RIGHT_FOREGROUND_COLORS=(233 234 235 24 25 26 32 69 75 81 87)
    ARRAY_GRADIENT_RIGHT_BACKGROUND_COLORS=(16 17 18 19 20 21 27 33 39 45 51)
    #ARRAY_GRADIENT_RIGHT_CHARACTERS=(▓ ▓ ▓ ▒ ▒ ▒ ▒ ░ ░ ░ ░)
    ARRAY_GRADIENT_RIGHT_CHARACTERS=(░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░)
#}

###           ###
### FUNCTIONS ###
###           ###

# Function to set the color of the prompt X based upon last exit status.
fn_ExitStatus () {
    #EXIT_CODE=$?
    if [[ $EXIT_CODE -eq 0 ]]; then  
        PR_PRIVILEGES='%F{34}%K{235}%#%f%k'
    elif [[ $EXIT_CODE -eq 1 ]]; then  
        PR_PRIVILEGES='%F{160}%K{235}%#%f%k'
    else
        PR_PRIVILEGES='%F{248}%K{235}%#%f%k'
    fi
}

###             ###
### PRE-COMMAND ###
###             ###

function precmd {
    # Get previous command's exit status. Run this before executing any other
    # zsh pre-command executables, or you'll get the status of the previously
    # run zsh command, rather than what the shell last executed.
#    EXIT_CODE=$?
#    EXIT_CODE=`print -P "%?"`

    # Find the terminal's width and height
    local TERMWIDTH
    local TERMHEIGHT
    ((TERMWIDTH = ${COLUMNS} - 1))
    ((TERMHEIGHT = ${LINES} - 1))

    # Run External programs in precmd as not to clobber zsh internal
    # functions.

    # Enable vcs_info
    vcs_info

    # Define size of prompt elements.
    # NOTE: These MUST match the layout of the styling define below. 
    # No, we cannot use the variables here, because they are not 
    # defined yet.
    # Element Lengths:
    GRADIENT_LENGTH_LEFT=${#ARRAY_GRADIENT_LEFT_CHARACTERS}
    GRADIENT_LENGTH_RIGHT=${#ARRAY_GRADIENT_RIGHT_CHARACTERS}
    USER_HOST_TTY_LENGTH=${#${(%):-%n@%M:%y}}
    LINE_NUMBER_LENGTH=${#${(%):--%I-}}
    PWD_LENGTH=${#${(%):-%d}}
    PRIVILEGES_LENGTH=${#${(%):-%#}}
    DIRECTORY_INFO_LENGTH=""
    VCS_STATUS_LENGTH=""

    # Fillers:
    GRADIENT_FILLBAR_LEFT=""
    GRADIENT_FILLBAR_RIGHT=""
    VCS_STATUS_FILLBAR=""
    PWD_FILLBAR=""

    # Line Lengths:
    ((GRADIENT_USER_HOST_TTY_LINE_LENGTH=$GRADIENT_LENGTH_LEFT + $USER_HOST_TTY_LENGTH + $GRADIENT_LENGTH_RIGHT))
    # This just needs to have proper variables filled in, or it will return an
    # error.
    #((VCS_STATUS_LINE_LENGTH=$VCS_STATUS_LENGTH))
    ((LINE_NUMBER_PWD_LINE_LENGTH=$LINE_NUMBER_LENGTH + $PWD_LENGTH + $PRIVILEGES_LENGTH))

    # Adjust the spacing.
    #
    # Note: Maximum character limit for $HOSTNAME is 32.
    if [[ $GRADIENT_USER_HOST_TTY_LINE_LENGTH -gt $TERMWIDTH ]]; then
        # This is where we need to truncate the User, Host and TTY variables if
        # they exceed the maximum terminal width.
        ((GRADIENT_FILLBAR_TOTAL=$TERMWIDTH - $USER_HOST_TTY_LENGTH))
    else
        ((GRADIENT_FILLBAR_TOTAL=$TERMWIDTH - $GRADIENT_USER_HOST_TTY_LINE_LENGTH))
        #echo "C: $COLUMNS | TW: $TERMWIDTH | GUHTL: $GRADIENT_USER_HOST_TTY_LINE_LENGTH | UHTL: $USER_HOST_TTY_LENGTH | GLL: $GRADIENT_LENGTH_LEFT | GLR: $GRADIENT_LENGTH_RIGHT"
        if [[ "$GRADIENT_FILLBAR_TOTAL % 2" -eq 0 ]]; then 
            GRADIENT_FILLBAR_LEFT="\${(l.($GRADIENT_FILLBAR_TOTAL / 2).)}"
            GRADIENT_FILLBAR_RIGHT="\${(l.($GRADIENT_FILLBAR_TOTAL / 2).)}"
        else 
            GRADIENT_FILLBAR_LEFT="\${(l.(($GRADIENT_FILLBAR_TOTAL / 2) + 1).)}"
            GRADIENT_FILLBAR_RIGHT="\${(l.(($GRADIENT_FILLBAR_TOTAL / 2) + 1).)}"
        fi
    fi

    #if [[ "$VCS_STATUS_LENGTH + DIRECTORY_INFO_LENGTH" -gt $TERMWIDTH ]]; then
    #    (( ))
    #else
    #    
    #fi

    #if [[ "$LINE_NUMBER_LENGTH + $PWD_LENGTH" -gt $TERMWIDTH ]]; then 
    #    ((PR_PWD_))
    #else
    #    PWD_FILLBAR=""
    #fi

}

###          ###
### PRE-EXEC ###
###          ###

preexec () {
# Change the title for tmux or screen
#    if [[ "$TERM" == "screen*" ]; then
#        local CMD=${1[(wr)^(*=*|sudo|-*)]}
#        echo -n "\ek$CMD\e\\"
#    fi

local EXIT_CODE=$?
}

###        ###
### PROMPT ###
###        ###

setprompt () {
    # Need this so the prompt will work.
    #setopt prompt_subst

    # See if we can use colors.
    #autoload colors zsh/terminfo

    # How many colors do we have to work with?
    #if [[ "$terminfo[colors]" -eq 256 ]]; then
    #    colors    
    #elif [[ "$terminfo[colors]" -ge 8 ]]; then
	#    colors
    #fi

    # 256-Color Terminals
    

    # 16-Color Terminals
    #for color in RED GREEN YELLOW BLUE MAGENTA CYAN WHITE; do
	#    eval PR_$color='%{$terminfo[bold]$fg[${(L)color}]%}'
	#    eval PR_LIGHT_$color='%{$fg[${(L)color}]%}'
	#    (( count = $count + 1 ))
    #done
    #PR_NO_COLOUR="%{$terminfo[sgr0]%}"

    # See if we can use extended characters to look nicer.
    #typeset -A altchar
    #set -A altchar ${(s..)terminfo[acsc]}
    #PR_SET_CHARSET="%{$terminfo[enacs]%}" 

# Styling the Prompt

# Gradients:
# Left Side
for ((li=0; li<=${#ARRAY_GRADIENT_LEFT_BACKGROUND_COLORS[@]}; li++)); do 
    PR_GRADIENT_LEFT=$PR_GRADIENT_LEFT`print -P "%F{${ARRAY_GRADIENT_LEFT_FOREGROUND_COLORS[$li]}}%K{${ARRAY_GRADIENT_LEFT_BACKGROUND_COLORS[$li]}}${ARRAY_GRADIENT_LEFT_CHARACTERS[$li]}"`
done

# Right Side
for ((ri=0; ri<=${#ARRAY_GRADIENT_RIGHT_BACKGROUND_COLORS[@]}; ri++)); do
    PR_GRADIENT_RIGHT=$PR_GRADIENT_RIGHT`print -P "%F{${ARRAY_GRADIENT_RIGHT_FOREGROUND_COLORS[$ri]}}%K{${ARRAY_GRADIENT_RIGHT_BACKGROUND_COLORS[$ri]}}${ARRAY_GRADIENT_RIGHT_CHARACTERS[$ri]}%f%k"`
done

# User@Host:TTY 
PR_USER_HOST_TTY='%F{231}%K{16}%n%F{196}@%F{231}%M%F{21}:%F{231}%y'

# Line Numbers:
PR_LINE_NUMBERS='%F{101}%K{16} %I %f%k'

# Directory:
PR_PWD='%F{246}%K{235}%/'

# Privileges:
#PR_PRIVILEGES='%?' -- works properly
fn_ExitStatus

#if [[ $EXIT_CODE -eq 0 ]]; then  
#    PR_PRIVILEGES='%F{34}%K{235}%#%f%k'
#elif [[ $EXIT_CODE -eq 1 ]]; then  
#    PR_PRIVILEGES='%F{160}%K{235}%#%f%k'
#else
#    PR_PRIVILEGES='%F{248}%K{235}%#%f%k'
#fi

# Directory Info:
PR_DIRECTORY_INFO='%F{246}%K{235}'$($HOME/.libexec/directoryinfo.sh -e -P -p -U -G -m -c $PWD)

# Version Control System Status:
PR_VCS_STATUS='%F{246}%K{235}'${vcs_info_msg_0_}

# PS1
PROMPT='$PR_SET_CHARSET$PR_STITLE${(e)PR_TITLEBAR}\
$PR_GRADIENT_LEFT${(e)GRADIENT_FILLBAR_LEFT}$PR_USER_HOST_TTY${(e)GRADIENT_FILLBAR_RIGHT}$PR_GRADIENT_RIGHT
$PR_DIRECTORY_INFO
$PR_LINE_NUMBERS$PR_BRACKET_LEFT$PR_PWD$PR_BRACKET_RIGHT $PR_PRIVILEGES $PR_NO_COLOUR'

#|$PR_VCS_STATUS

# Right Prompt
RPROMPT=''

# PS2
#PS2='$PR_BLUE$PR_LBRACKET$PR_YELLOW%_$PR_BLUE$PR_RBRACKET$PR_NO_COLOUR $ '
}

# PS3
#PS3=''

# PS4
#PS4=''

setprompt

#EOF
